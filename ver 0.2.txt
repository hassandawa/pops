########################################
# manage.py
########################################

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pops.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



########################################
# app\admin.py
########################################

# admin.py
from django import forms
from django.contrib import admin
from .models import Product, District, Market
from .models import Subscription
from django.contrib import admin
from django_celery_results.models import TaskResult



class ProductAdminForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = '__all__'


class ProductAdmin(admin.ModelAdmin):
    form = ProductAdminForm
    list_display = ('product', 'quantity', 'price', 'district', 'market', 'created_at')

    class Media:
        js = ('admin/js/dynamic_dropdown.js',)  # Ensure this path is correct based on your static files setup

    def save_model(self, request, obj, form, change):
        """
        Override the save_model to always create a new product entry on change.
        """
        # Remove the primary key to create a new entry
        obj.pk = None  # This ensures a new entry is created
        super().save_model(request, obj, form, change)


@admin.register(Market)
class MarketAdmin(admin.ModelAdmin):
    """
    Custom admin configuration for Market.
    """
    list_display = ('name', 'district')
    search_fields = ('name',)


@admin.register(District)
class DistrictAdmin(admin.ModelAdmin):
    """
    Custom admin configuration for District.
    """
    list_display = ('name',)

@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    list_display = ('email', 'phone_number', 'package', 'verified', 'created_at')
    search_fields = ('email', 'phone_number', 'package')
    list_filter = ('package', 'verified')


admin.site.register(Product, ProductAdmin)


########################################
# app\apps.py
########################################

from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'app'


########################################
# app\forms.py
########################################

# app/forms.py
from django import forms
from .models import District, Market, Product

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'district', 'market', 'price']
        widgets = {
            'district': forms.Select(attrs={'class': 'form-control'}),
            'market': forms.Select(attrs={'class': 'form-control'}),
        }

class FilterForm(forms.Form):
    district = forms.ModelChoiceField(
        queryset=District.objects.all(),
        empty_label="All Districts",
        required=False
    )
    market = forms.ModelChoiceField(
        queryset=Market.objects.all(),
        empty_label="All Markets",
        required=False
    )
    date = forms.DateField(required=False)
    month = forms.CharField(max_length=2, required=False)
    year = forms.CharField(max_length=4, required=False)
    product = forms.CharField(max_length=255, required=False)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Add "All" options dynamically for districts and markets
        self.fields['district'].choices = [("", "All Districts")] + [
            (district.name, district.name) for district in District.objects.all()
        ]
        self.fields['market'].choices = [("", "All Markets")] + [
            (market.name, market.name) for market in Market.objects.all()
        ]


########################################
# app\models.py
########################################

# app/models.py
from django.db import models
from django.contrib.auth.models import User
from datetime import timedelta, datetime

class District(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name


class Market(models.Model):
    name = models.CharField(max_length=255, unique=True)
    district = models.ForeignKey(District, on_delete=models.CASCADE, related_name='markets', null=True, blank=True)

    def __str__(self):
        return self.name


class Product(models.Model):
    product = models.CharField(max_length=255)
    quantity = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    district = models.ForeignKey(District, null=True, blank=True, on_delete=models.SET_NULL)
    market = models.ForeignKey(Market, null=True, blank=True, on_delete=models.SET_NULL)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.product} - {self.district} - {self.market}"


class ProductInterest(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="interests", null=True, blank=True)
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="interested_users")
    email = models.EmailField(null=True, blank=True)
    phone = models.CharField(max_length=15, null=True, blank=True)
    subscribed_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.product.product} - {self.email or self.phone or 'Anonymous'}"


# models.py (add to your existing Subscription model)
class Subscription(models.Model):
    PACKAGE_CHOICES = [
        ('bronze', 'Bronze'),
        ('silver', 'Silver'),
        ('gold', 'Gold'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    package = models.CharField(max_length=10, choices=PACKAGE_CHOICES)
    email = models.EmailField(null=True, blank=True)
    phone_number = models.CharField(max_length=15, null=True, blank=True)
    months = models.IntegerField(default=1)  # Duration in months
    created_at = models.DateTimeField(auto_now_add=True)
    verified = models.BooleanField(default=False)
    alerts_sent = models.IntegerField(default=0)  # Track alerts sent

    class Meta:
        unique_together = ('email', 'phone_number')

    def get_end_date(self):
        """Calculate subscription end date."""
        return self.created_at + timedelta(days=30 * self.months)

    def get_alert_limit(self):
        """Determine how many alerts this package allows per month."""
        package_alerts = {'bronze': 4, 'silver': 8, 'gold': 16}
        return package_alerts.get(self.package, 0) * self.months

    def is_active(self):
        """Check if the subscription is still valid."""
        return datetime.now() <= self.get_end_date()

    def can_receive_alert(self):
        """Check if the user has remaining alerts in their subscription."""
        return self.is_active() and self.alerts_sent < self.get_alert_limit()
    
    def __str__(self):
        return f"{self.email or self.phone_number} - {self.package} ({self.months} months)"


########################################
# app\send_alerts.py
########################################

from django.utils.timezone import now
from django.core.mail import send_mail
from .models import Subscription

def send_subscription_alerts():
    """Send alerts to users who still have alerts remaining and an active subscription."""
    subscriptions = Subscription.objects.all()

    for subscription in subscriptions:
        if subscription.is_active():
            days_remaining = (subscription.get_end_date() - now()).days

            # Send expiry warning if 3 days left
            if days_remaining <= 3:
                message = f"Your subscription expires in {days_remaining} days. Renew now to continue receiving alerts."
                if subscription.email:
                    send_mail(
                        'Subscription Expiry Warning',
                        message,
                        'no-reply@yourapp.com',
                        [subscription.email],
                        fail_silently=True,
                    )

            # Send regular alerts if eligible
            if subscription.can_receive_alert():
                message = f"Your {subscription.package} subscription alert. You have {subscription.get_alert_limit() - subscription.alerts_sent} remaining."
                if subscription.email:
                    send_mail(
                        'Subscription Alert',
                        message,
                        'no-reply@yourapp.com',
                        [subscription.email],
                        fail_silently=True,
                    )

                subscription.alerts_sent += 1
                subscription.save()

                print(f"Sent alert to {subscription.email or subscription.phone_number}")
        else:
            print(f"Subscription expired or limit reached for {subscription.email or subscription.phone_number}")


########################################
# app\tasks.py
########################################

# app/tasks.py
from celery import shared_task

@shared_task
def test_task():
    return "âœ… Celery is working!"

########################################
# app\tests.py
########################################

from django.test import TestCase

# Create your tests here.


########################################
# app\urls.py
########################################

#app/urls.py
from django.contrib import admin
from django.urls import path, include
from django.contrib.auth.views import LoginView  # Import LoginView here
from .views import send_otp, verify_otp, subscribe

urlpatterns = [
    path('admin/', admin.site.urls),
    path('login/', LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('', include('app.urls')),  # Ensure your app's URLs are included
    path('api/send-otp/', send_otp, name='send_otp'),
    path('api/verify-otp/', verify_otp, name='verify_otp'),
    path('api/subscribe/', subscribe, name='subscribe'),
]



########################################
# app\views.py
########################################

# views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse, JsonResponse
from django.db.models import Q
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from .models import Product, District, Market, Subscription
import csv
import json
import random
from datetime import datetime, timedelta

# Temporary storage for OTPs (use database or cache in production)
otp_storage = {}


@csrf_exempt
def send_otp(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            contact_method = data.get('contact_method')
            contact_value = data.get('contact_value')

            # Generate OTP
            otp = str(random.randint(1000, 9999))
            expiration = datetime.now() + timedelta(minutes=5)

            # Store OTP temporarily
            otp_storage[contact_value] = {
                'otp': otp,
                'expires': expiration.timestamp(),
            }

            # Simulate sending OTP (Replace this with actual email/SMS sending logic)
            print(f"OTP for {contact_value}: {otp}")

            return JsonResponse({'success': True, 'message': 'OTP sent successfully'})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)

@csrf_exempt
def verify_otp(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            otp_entered = data.get('otp')
            contact_value = data.get('contact_value')
            product_id = data.get('product')
            package = data.get('package')

            stored_data = otp_storage.get(contact_value)

            if not stored_data:
                return JsonResponse({'verified': False, 'error': 'No OTP found for this contact.'})

            if stored_data['otp'] != otp_entered:
                return JsonResponse({'verified': False, 'error': 'Incorrect OTP.'})

            # Save subscription if OTP is correct
            Subscription.objects.create(
                email=contact_value if "@" in contact_value else None,
                phone_number=contact_value if "@" not in contact_value else None,
                package=package,
                verified=True
            )

            del otp_storage[contact_value]  # Remove OTP from storage
            return JsonResponse({'verified': True, 'message': 'Subscription confirmed!'})

        except Exception as e:
            return JsonResponse({'verified': False, 'error': str(e)}, status=400)


@csrf_exempt
def subscribe(request):
    if request.method == 'POST':
        product_id = request.POST.get('product')
        contact_method = request.POST.get('contact_method')
        contact_value = request.POST.get('contact_value')
        package = request.POST.get('package')

        if not product_id or not contact_value or not package:
            messages.error(request, "All fields are required.")
            return redirect('subscription_page')

        # Ensure the selected product exists
        product = Product.objects.filter(id=product_id).first()
        if not product:
            messages.error(request, "Invalid product selection.")
            return redirect('subscription_page')

        # Create subscription
        subscription = Subscription.objects.create(
            user=None,  # Anonymous users
            product=product,
            package=package,
            email=contact_value if contact_method == 'email' else None,
            phone_number=contact_value if contact_method == 'phone' else None,
            verified=False  # Mark as unverified before OTP confirmation
        )

        messages.success(request, f'Successfully subscribed to {product.product} under {package} package!')
        return redirect('subscription_page')

    return render(request, 'subscription_page.html', {'products': Product.objects.all()})
def subscription_page(request):
    products = Product.objects.all()  # Fetch all products
    return render(request, 'subscription_page.html', {'products': products})  # Pass to template


def index(request):
    # Fetch distinct options for dropdowns
    districts = list(District.objects.values_list('name', flat=True))
    markets = list(Market.objects.values_list('name', flat=True))
    products = list(Product.objects.values_list('product', flat=True).distinct())

    # Add default "All" options
    districts.insert(0, "All Districts")
    markets.insert(0, "All Markets")

    # Get filter selections from the request
    selected_district = request.GET.get('district', "All Districts")
    selected_market = request.GET.get('market', "All Markets")
    selected_product = request.GET.get('product', '')
    selected_date = request.GET.get('date', '')
    selected_month = request.GET.get('month', '')
    selected_year = request.GET.get('year', '')

    # Start with all products
    product_list = Product.objects.all().order_by('-created_at')

    # If no filters are applied, show only products with no district and no market
    if not request.GET:
        product_list = product_list.filter(Q(district__isnull=True) & Q(market__isnull=True))

    # Apply filters for district, market, and product
    if selected_district != "All Districts":
        product_list = product_list.filter(district__name=selected_district)

    if selected_market != "All Markets":
        product_list = product_list.filter(market__name=selected_market)

    if selected_product:
        product_list = product_list.filter(product=selected_product)

    # Apply date, month, and year filtering
    if selected_date:
        try:
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            product_list = product_list.filter(created_at__date=date_obj.date())
        except ValueError:
            pass  # Ignore invalid date format

    if selected_month:
        try:
            month_obj = datetime.strptime(selected_month, "%Y-%m")
            product_list = product_list.filter(
                created_at__year=month_obj.year, created_at__month=month_obj.month
            )
        except ValueError:
            pass  # Ignore invalid month format

    if selected_year:
        try:
            year_int = int(selected_year)
            product_list = product_list.filter(created_at__year=year_int)
        except ValueError:
            pass  # Ignore invalid year format

    # Format price and date for display
    for product in product_list:
        product.price = "{:,.0f}".format(product.price)  # Format price as 97,800
        if product.created_at:
            product.created_at = product.created_at.strftime("%d/%m/%y, %I:%M %p").lower()  # Format date

    # Context for rendering the template
    context = {
        'product_list': product_list,
        'districts': districts,
        'markets': markets,
        'products': products,
        'selected_district': selected_district if selected_district != "All Districts" else '',
        'selected_market': selected_market if selected_market != "All Markets" else '',
        'selected_product': selected_product,
        'selected_date': selected_date,
        'selected_month': selected_month,
        'selected_year': selected_year,
    }

    return render(request, 'index.html', context)




def get_markets(request, district_id):
    """
    Fetch markets for a given district ID.
    """
    markets = Market.objects.filter(district_id=district_id)
    market_data = [{'id': market.id, 'name': market.name} for market in markets]

    return JsonResponse({'markets': market_data})


def export_csv(request):
    """
    Export product data to a CSV file.
    """
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename=Products.csv'

    writer = csv.writer(response)
    writer.writerow(['Products', 'Quantity', 'Price', 'District', 'Market', 'Date'])

    for product in Product.objects.all():
        writer.writerow([
            product.product,
            product.quantity,
            "{:,.0f}".format(product.price),  # Format price as 97,800
            product.district.name if product.district else "All Districts",
            product.market.name if product.market else "All Markets",
            product.created_at.strftime("%d/%m/%y, %I:%M %p").lower(),  # Format date
        ])

    return response


########################################
# app\__init__.py
########################################



########################################
# app\migrations\0001_initial.py
########################################

# Generated by Django 5.1.4 on 2025-01-29 10:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='markets', to='app.district')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(max_length=255)),
                ('quantity', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.district')),
                ('market', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.market')),
            ],
        ),
        migrations.CreateModel(
            name='ProductInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interested_users', to='app.product')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')], max_length=10)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('email', 'phone_number')},
            },
        ),
    ]


########################################
# app\migrations\0002_subscription_alerts_sent_subscription_months.py
########################################

# Generated by Django 5.1.4 on 2025-01-30 13:21

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='subscription',
            name='alerts_sent',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='subscription',
            name='months',
            field=models.IntegerField(default=1),
        ),
    ]


########################################
# app\migrations\__init__.py
########################################



########################################
# pops\asgi.py
########################################

"""
ASGI config for pops project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pops.settings')

application = get_asgi_application()


########################################
# pops\celery.py
########################################

import os
from celery import Celery

# Set Django settings module for Celery
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pops.settings')

app = Celery('pops')

# Load config from Django settings
app.config_from_object('django.conf:settings', namespace='CELERY')

# Autodiscover tasks in installed apps
app.autodiscover_tasks()

@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')


########################################
# pops\settings.py
########################################

"""
Django settings for pops project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k@x%r41at2d%4=u+sar7qd&(04tzo63eaf72#ht@a09-sn$s-q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'django.contrib.humanize',
    'django_celery_beat',
    'django_celery_results',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "app/static",  # Adjust this path if necessary
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_URL = '/login/'  # Or any custom login page you have

# Alerts
CELERY_BROKER_URL = 'redis://localhost:6379/0'


# CELERY CONFIGURATION
CELERY_BROKER_URL = 'django://'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # ðŸ‘ˆ Add this line

########################################
# pops\urls.py
########################################

"""
URL configuration for pops project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('get_markets/<int:district_id>/', views.get_markets, name='get_markets'),
    path('export/csv/', views.export_csv, name='export_csv'),
    
    # Subscription-related URLs
    path('subscribe/', views.subscription_page, name='subscription_page'),  # Subscription page
    path('send-otp/', views.send_otp, name='send_otp'),
    path('verify-otp/', views.verify_otp, name='verify_otp'),
    path('subscribe/', views.subscribe, name='subscribe'),
]





########################################
# pops\wsgi.py
########################################

"""
WSGI config for pops project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pops.settings')

application = get_wsgi_application()


########################################
# pops\__init__.py
########################################

from .celery import app as celery_app

__all__ = ('celery_app',)

########################################
# app\templates\base.html
########################################
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1"/>
    <title>Prices of Produces</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css"/>
    <style>
    /* Sidebar Styles */
    .sidebar {
        height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        background-color: #f8f9fa;
        padding: 5px 10px; /* Unified padding */
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    .sidebar a {
        padding: 10px 20px;
        text-decoration: none;
        font-size: 16px;
        color: #333;
    }

    .sidebar a:hover {
        background-color: #ddd;
    }

    .sidebar .form-group {
        margin-bottom: 10px;
    }

    .sidebar .btn {
        font-size: 15px; /* Match other buttons */
        padding: 6px 12px; /* Adjust for consistent height */
        border-radius: 4px; /* Keep consistent with design */
        height: auto; /* Ensure automatic adjustment */
    }

    /* Custom Button Styles */
    .custom-btn, .custom-reset-btn {
        padding: 5px; /* Reduce height */
        font-size: 13px; /* Smaller text */
        height: auto; /* Ensure height adjusts automatically */
        border-radius: 4px; /* Optional: Slightly rounded corners */
    }

    /* Remove Hover Effect for Reset Button */
    .custom-reset-btn:hover {
        background-color: #60676e !important; /* Default reset color (Bootstrap secondary) */
        text-decoration: none !important; /* Ensure no underline */
    }

    /* Main Content */
    .main-content {
        margin-left: 250px;
        padding: 10px;
        transition: margin-left 0.3s;
    }
     

    /* Responsive Sidebar */
    @media (max-width: 768px) {
        .sidebar {
            position: absolute;
            width: 100%;
            height: auto;
            display: none; /* Hidden by default */
        }
        .main-content {
            margin-left: 0;
        }
        .toggle-sidebar-btn {
            display: block;
            margin: 10px;
        }
    }

    /* Minimize Gaps Between Forms */
    .form-group, .filter-form, .subscription-form, .action-buttons {
        margin-bottom: 1px;
    }

    /* Buttons */
    .btn-sm {
        font-size: 15px;
    }

    </style>
</head>
<body>
    <!-- Toggle Button for Sidebar -->
    <button class="toggle-sidebar-btn" onclick="toggleSidebar()">â˜° toggle Sidebar</button>
    <div class="sidebar" id="sidebar">
        <!-- Filter Form -->
        <div class="filter-form" style="padding-bottom: 5px; margin-bottom: 5px; border-bottom: 3px dotted #ccc; max-width: 250px;">
            <form class="filter-form" method="GET" action="{% url 'index' %}">
                <label for="product" class="form-label">Filter Products</label>
                <!-- Product Dropdown -->
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="product" class="form-label me-2">Product:</label>
                    <select id="product" name="product" class="form-control form-control-sm">
                        <option value="">All Products</option>
                        {% for product in products %}
                        <option value="{{ product }}" {% if product == selected_product %}selected{% endif %}>{{ product }}</option>
                        {% endfor %}
                    </select>
                </div>
                <!-- District Dropdown -->
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="district" class="form-label me-2">District:</label>
                    <select id="district" name="district" class="form-control form-control-sm">
                        {% for district in districts %}
                        <option value="{{ district }}" {% if district == selected_district %}selected{% endif %}>{{ district }}</option>
                        {% endfor %}
                    </select>
                </div>
                <!-- Market Dropdown -->
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="market" class="form-label me-2">Market:</label>
                    <select id="market" name="market" class="form-control form-control-sm">
                        {% for market in markets %}
                        <option value="{{ market }}" {% if market == selected_market %}selected{% endif %}>{{ market }}</option>
                        {% endfor %}
                    </select>
                </div>
                <!-- Date, Month, Year -->
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="date" class="form-label me-2">Date:</label>
                    <input type="date" name="date" id="date" class="form-control form-control-sm" value="{{ selected_date }}">
                </div>
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="month" class="form-label me-2">Month:</label>
                    <input type="text" name="month" id="month" class="form-control form-control-sm" placeholder="MM" value="{{ selected_month }}">
                </div>
                <div class="form-group d-flex align-items-center mb-2">
                    <label for="year" class="form-label me-2">Year:</label>
                    <input type="text" name="year" id="year" class="form-control form-control-sm" placeholder="YYYY" value="{{ selected_year }}">
                </div>
                <!-- Centered Buttons -->
                <div class="d-flex gap-2 mt-3">
                <!-- Filter Button -->
                    <button type="submit" class="btn btn-secondary btn-sm custom-btn w-50 text-white">
                        Filter
                    </button>
                <!-- Reset Button -->
                <a href="{% url 'index' %}" class="btn btn-secondary btn-sm custom-reset-btn w-50 text-white">Reset</a>
                </div>
            </form>
        </div>
        <!-- Subscription Form -->
        <div class="subscription-form" style="padding-bottom: 5px; margin-bottom: 5px; border-bottom: 3px dotted #ccc; max-width: 250px;">
            <label for="Subscribe" class="form-label">Subscriptions </label>
            <p class="text-muted">Use your email or phonenumber to get product alerts.</p>
            <div class="subscription-link" style="margin-bottom: 20px;">
                <a href="{% url 'subscription_page' %}" class="btn btn-secondary custom-reset-btn text-white w-100">Subscribe</a>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons" style="padding-bottom: 10px; margin-bottom: 10px; border-bottom: 3px dotted #ccc;">
            <!-- Left-aligned Label -->
            <label for="action-buttons" class="form-label mb-3 text-start w-100">Share & Export</label>
            <!-- Buttons Side by Side -->
                <div class="d-flex gap-2">
                    <!-- Share Dropdown -->
                    <div class="dropdown w-50">
                        <button class="btn btn-secondary btn-sm w-100 dropdown-toggle" type="button" id="shareDropdown" data-bs-toggle="dropdown">
                            Share
                        </button>
                            <ul class="dropdown-menu" aria-labelledby="shareDropdown">
                                <li><a class="dropdown-item" href="https://wa.me/?text=Check out this content: {{ request.build_absolute_uri }}" target="_blank">WhatsApp</a></li>
                                <li><a class="dropdown-item" href="https://www.facebook.com/sharer/sharer.php?u={{ request.build_absolute_uri }}" target="_blank">Facebook</a></li>
                                <li><a class="dropdown-item" href="https://twitter.com/intent/tweet?text=Check out this content: &url={{ request.build_absolute_uri }}" target="_blank">Twitter</a></li>
                            </ul>
                    </div>
                    <!-- Export Button -->
                    <button type="button" class="btn btn-secondary btn-sm w-50 text-white" onclick=window.location.href="{% url 'export_csv' %}">
                        Export
                    </button>
                </div>
        </div>
        <!-- footer -->
        <label for="action-buttons" class="form-label">Powered by Kateregga Dennis</label>
    </div>
        <!-- Main Content -->
            <div class="main-content" id="mainContent" style="padding-top: 0; margin-top: 0;">
                {% block content %}
                <div style="margin-top: -20px;"> <!-- Adjust this negative margin as needed -->
                    <table id="table" class="table table-striped table-bordered">
                        <!-- Table contents here -->
                    </table>
                </div>
                {% endblock %}
            </div>
    <!-- js -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script>
        $(document).ready(function() {
            $('#table').DataTable({
                "order": [[3, "desc"]]  // Assuming 'created_at' is in the 4th column (index 3)
            });
        });

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            if (sidebar.style.display === 'flex') {
                sidebar.style.display = 'none';
            } else {
                sidebar.style.display = 'flex';
            }
        }
    </script>
    <!-- Include your dynamic dropdown script -->
    <script src="{% static 'admin/js/dynamic_dropdown.js' %}"></script>
</body>
</html>


########################################
# app\templates\index.html
########################################
{% extends "base.html" %}
{% load humanize %}

{% block content %}
<div class='table-responsive'>
   {% if product_list %}
       <table id='table' class='table table-bordered table-striped'>
           <thead>
               <tr>
                   <th>Product</th>
                   <th>Quantity</th>
                   <th>Price (shs)</th>
                   <th>Date</th>
               </tr>
           </thead>
           <tbody>
               {% for product in product_list %}
                   <tr>
                       <td>{{ product.product }}</td>
                       <td>{{ product.quantity }}</td>
                       <td>{{ product.price }}</td>
                       <td>{{ product.created_at }}</td>
                   </tr>
               {% endfor %}
           </tbody>
       </table> 
   {% else %}
       <p>No records found.</p> 
   {% endif %}
</div>
{% endblock %}

########################################
# app\templates\subscription_page.html
########################################
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1"/>
    <title>Subscribe to Alerts</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-4">
        <h2 class="text-center mb-4">Subscriptions</h2>
        <div class="card mx-auto" style="max-width: 500px; padding: 20px;">
            <!-- Subscription Form -->
            <form id="subscriptionForm">
                {% csrf_token %}

                <!-- Product Dropdown -->
                <div class="mb-3">
                    <label for="product" class="form-label">Select Product</label>
                    <select id="product" name="product" class="form-select">
                        <option value="">-- Select Product --</option>
                        {% for product in products %}
                            <option value="{{ product.id }}">{{ product.product }}</option>
                        {% endfor %}
                    </select>
                </div>

                <!-- Package Selection -->
                <div class="mb-3">
                    <label for="package" class="form-label">Select Package</label>
                    <select id="package" name="package" class="form-select" onchange="updatePackageDetails()">
                        <option value="">-- Select Package --</option>
                        <option value="bronze">Bronze</option>
                        <option value="silver">Silver</option>
                        <option value="gold">Gold</option>
                    </select>
                </div>

                <!-- Subscription Duration -->
                <div class="mb-3">
                    <label for="months" class="form-label">Subscription Duration (Months)</label>
                    <select id="months" name="months" class="form-select" onchange="calculateTotal()">
                        <option value="">-- Select Months --</option>
                        {% for month in "123456789101112" %}
                            <option value="{{ forloop.counter }}">{{ forloop.counter }} Month{{ forloop.counter|pluralize }}</option>
                        {% endfor %}
                    </select>
                </div>

                <!-- Package Details (Hidden by Default) -->
                <div id="packageDetails" class="alert alert-info" style="display: none;">
                    <strong>Package Details:</strong>
                    <p id="packageDescription"></p>
                    <p><strong>Total Price:</strong> <span id="totalPrice">0</span> UGX</p>
                </div>

                <!-- Contact Method Dropdown -->
                <div class="mb-3">
                    <label for="contact_method" class="form-label">Preferred Contact </label>
                    <select id="contact_method" name="contact_method" class="form-select" onchange="toggleContactFields()">
                        <option value="">-- Select Contact --</option>
                        <option value="email">Email</option>
                        <option value="phone">Phone</option>
                    </select>
                </div>

                <!-- Email Input (Initially Hidden) -->
                <div class="mb-3" id="email_field" style="display: none;">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" id="email" name="contact_value" class="form-control">
                </div>

                <!-- Phone Input (Initially Hidden) -->
                <div class="mb-3" id="phone_field" style="display: none;">
                    <label for="phone_number" class="form-label">Phone Number</label>
                    <input type="text" id="phone_number" name="contact_value" class="form-control">
                </div>

                <!-- Subscribe Button -->
                <button type="button" class="btn btn-secondary w-100" onclick="sendOTP()">Subscribe</button>
            </form>

            <!-- OTP Verification Form -->
            <form id="otpForm" method="POST" style="display: none;" onsubmit="verifyOTP(event)">
                {% csrf_token %}
                <label for="otp">Enter OTP:</label>
                <input type="text" id="otpInput" name="otp" class="form-control mb-3">
                <input type="hidden" name="contact_value" id="otp_contact_value">
                <input type="hidden" name="product" id="otp_product">
                <input type="hidden" name="package" id="otp_package">
                <input type="hidden" name="months" id="otp_months">
                <button type="submit" class="btn btn-primary w-100">Verify OTP</button>

                <!-- Message Area -->
                <p id="otpMessage" class="mt-3 text-center"></p>
            </form>
        </div>
    </div>

    <script>
        let packagePrices = {
            "bronze": 5000,
            "silver": 10000,
            "gold": 20000
        };

        function toggleContactFields() {
            var contactMethod = document.getElementById("contact_method").value;
            document.getElementById("email_field").style.display = contactMethod === "email" ? "block" : "none";
            document.getElementById("phone_field").style.display = contactMethod === "phone" ? "block" : "none";
        }

        function updatePackageDetails() {
            var packageType = document.getElementById("package").value;
            var packageDetails = document.getElementById("packageDetails");
            var packageDescription = document.getElementById("packageDescription");

            var packageInfo = {
                "bronze": "Bronze Package: <br> - 1 Product <br> - 4 Alerts per month",
                "silver": "Silver Package: <br> - 5 Products <br> - 8 Alerts per month",
                "gold": "Gold Package: <br> - 10 Products <br> - 16 Alerts per month"
            };

            if (packageType && packageInfo[packageType]) {
                packageDescription.innerHTML = packageInfo[packageType];
                packageDetails.style.display = "block";
                calculateTotal();
            } else {
                packageDetails.style.display = "none";
            }
        }

        function calculateTotal() {
            let packageType = document.getElementById("package").value;
            let months = parseInt(document.getElementById("months").value);
            let pricePerMonth = packagePrices[packageType] || 0;
            let totalPrice = pricePerMonth * months;
            document.getElementById("totalPrice").innerText = totalPrice.toLocaleString() + " UGX";
        }

        function sendOTP() {
            var contactMethod = document.getElementById("contact_method").value;
            var contactValue = contactMethod === "email" ? document.getElementById("email").value : document.getElementById("phone_number").value;
            var product = document.getElementById("product").value;
            var package = document.getElementById("package").value;
            var months = document.getElementById("months").value;

            if (!contactValue || !product || !package || !months) {
                alert("Please fill in all fields before subscribing.");
                return;
            }

            fetch("{% url 'send_otp' %}", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRFToken": "{{ csrf_token }}"
                },
                body: JSON.stringify({
                    contact_method: contactMethod,
                    contact_value: contactValue
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("OTP sent successfully!");

                    document.getElementById("subscriptionForm").style.display = "none";
                    document.getElementById("otpForm").style.display = "block";

                    document.getElementById("otp_contact_value").value = contactValue;
                    document.getElementById("otp_product").value = product;
                    document.getElementById("otp_package").value = package;
                    document.getElementById("otp_months").value = months;
                } else {
                    alert("Error sending OTP: " + data.error);
                }
            })
            .catch(error => alert("Failed to send OTP."));
        }
        function verifyOTP(event) {
        event.preventDefault(); // Prevent form from refreshing the page

        let otp = document.getElementById("otpInput").value;
        let contactValue = document.getElementById("otp_contact_value").value;
        let product = document.getElementById("otp_product").value;
        let package = document.getElementById("otp_package").value;
        let otpMessage = document.getElementById("otpMessage");

        fetch("{% url 'verify_otp' %}", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": "{{ csrf_token }}"
            },
            body: JSON.stringify({
                otp: otp,
                contact_value: contactValue,
                product: product,
                package: package
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.verified) {
                otpMessage.innerHTML = "<span class='text-success'>OTP Verified! Redirecting...</span>";
                
                // Redirect after 2 seconds
                setTimeout(() => {
                    window.location.href = "{% url 'index' %}"; 
                }, 2000);
            } else {
                otpMessage.innerHTML = "<span class='text-danger'>Invalid OTP. Please try again.</span>";
            }
        })
        .catch(error => {
            otpMessage.innerHTML = "<span class='text-danger'>An error occurred. Try again later.</span>";
        });
    }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

########################################
# app\templates\registration\login.html
########################################
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h2>Login</h2>
        <form method="post" action="{% url 'login' %}">
            {% csrf_token %}
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" name="username" id="username" class="form-control">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" name="password" id="password" class="form-control">
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
    </div>
</body>
</html>

